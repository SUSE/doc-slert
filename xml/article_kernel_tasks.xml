<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
                 type="text/xml"
                 title="Profiling step"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<article version="5.0" xml:lang="en" xml:id="article-kernel-tasks"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Processes and task states for Kernel programming</title>
 <info><productname>&productname;</productname>
  <productnumber>&productnumber;</productnumber>
  <xi:include href="common_copyright_gfdl.xml" parse="xml"/><date>
<?dbtimestamp?></date>
  <abstract>
   <para>
    The following article lists and describes the most important task modes
    needed for programming the &slert; Kernel.
   </para>
  </abstract>
 </info>
 <sect1 xml:id="sec-slert-kernel-tasks-intro">
  <title>Processes and task states</title>

  <para>
   Processes can be in different states, like <parameter>running</parameter> or
   <parameter>idle</parameter>.
  </para>
 
  <para>
   A process might be unable to run at any time and for a number of reasons. A
   process might be unable to continue running because it is waiting for input
   that is not present or the scheduler has decided it has run the maximum
   amount of time units allowed and that it must yield to another process.
  </para>
  
  <para>
   The following list describes the most important tasks needed for programming
   the &slerta; Kernel.
  </para>

<variablelist>
 
 <varlistentry>
  <term>
   <parameter>TASK_NEW</parameter>
  </term>
  <listitem>
   <para>
    Marks newly created tasks to prevent from external events (e.g. signals
    delivery) until the process is fully initialized and ready for running.
   </para>
  </listitem>
 </varlistentry>
 
 <varlistentry>
  <term>
   <parameter>TASK_RUNNING</parameter>
  </term>
  <listitem>
   <para>
    Task is runnable, and it is either currently running or on a run
    queue waiting to run. This process is either executing on CPU or waiting
    for the CPU to execute.
    </para>
  </listitem>
 </varlistentry>
 
 <varlistentry>
 <term>
  <parameter>TASK_IDLE</parameter>
 </term>
 <listitem>
  <para>
  Task is put to sleep until a condition evaluates to
   <parameter>TRUE</parameter>.
  </para>
 </listitem>
 </varlistentry>
 
 <varlistentry>
  <term>
   <parameter>TASK_INTERRUPTIBLE</parameter>
  </term>
  <listitem>
   <para>
    Task is supended (sleeping) until some condition becomes true.
    Events like hardware interrupt, signal delivery, released system resources
    can wake up the process and change the status back to
    <parameter>TASK_RUNNING</parameter>.
   </para>
  </listitem>
 </varlistentry>
 
 <varlistentry>
  <term>
   <parameter>TASK_UNINTERUPTIBLE</parameter>
  </term>
  <listitem>
   <para>
    Task is in suspended (sleeping) mode. A signal delivery is deferred.
    Tasks must be explicetily waked up by an event as for example by a
    <parameter>mutex</parameter>.
   </para>
  </listitem>
 </varlistentry>
 
 <varlistentry>
  <term>
   <parameter>TASK_KILLABLE</parameter>
  </term>
  <listitem>
   <para>
    Wakes up the task on receipt of fatal signals as for example an
    <parameter>I/O</parameter> operation.
   </para>
  </listitem>
 </varlistentry>
 
 <varlistentry>
  <term>
   <parameter>TASK_DEAD</parameter>
  </term>
  <listitem>
   <para>
    Task is ended but not deleted from the process table. These tasks can be
    reported as <parameter>Zombie</parameter> until their parent task collects
    their exit status.
   </para>
  </listitem>
 </varlistentry>
 
  
 <varlistentry>
  <term>
   <parameter>TASK_KILLABLE</parameter>
  </term>
  <listitem>
   <para>
    Alternates <parameter>TASK_UNINTERRUPTIBLE</parameter> semantic to allow
    wake up on fatal signals. This state is not visible from userspace.
   </para>
  </listitem>
 </varlistentry>
 
 <varlistentry>
  <term>
   <parameter>TASK_STOPPED</parameter>
  </term>
  <listitem>
   <para>
    Task is blocked by <parameter>SIGSTOP</parameter>.
   </para>
  </listitem>
 </varlistentry>
 
 <varlistentry>
  <term>
   <parameter>TASK_TRACED</parameter>
  </term>
  <listitem>
   <para>
    Task is blocked during <parameter>ptrace</parameter>.
   </para>
  </listitem>
 </varlistentry>
 
 <varlistentry>
  <term>
   <parameter>TASK_PARKED</parameter>
  </term>
  <listitem>
   <para>
    A kernel thread is parked.
   </para>
  </listitem>
 </varlistentry>
 
</variablelist>

  <sect2 xml:id="sec-slert-kernel-states-Diagram">
   <title>Diagramm</title>
   <para>
    Insert picture here.
   </para>
  </sect2>
 </sect1>
 
 <xi:include href="common_legal.xml" parse="xml"/>
</article>
