<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>

<chapter version="5.0" xml:id="cha-shielding-model"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>The Basic Shielding Model</title>
 <info/>
 <para>
  Although any setup of &cpuset;s can really be described as
  <emphasis>shielding</emphasis>, there is one prevalent shielding model in
  use that is so common that cset has a subcommand that is dedicated to its
  use. This subcommand is called <command>shield</command>.
 </para>
 <para>
  The concept behind this model is the use of three &cpuset;s:
 </para>
 
 <itemizedlist>
  <listitem>
   <formalpara>
    <title>Root &cpuset;</title>
    <para>is always present in all configurations and contains all CPUs.</para>
   </formalpara>
  </listitem>
  <listitem>
   <formalpara>
    <title>System &cpuset;</title>
    <para>contains CPUs which are used for system tasks. These are the normal
     tasks that are not important, but which need to run on the system.
    </para>
   </formalpara>
  </listitem>
  <listitem>
   <formalpara>
    <title>User &cpuset;</title>
    <para><quote>the shield</quote>, contains CPUs which are used for
     important tasks. Only those tasks that are somehow important, usually
     tasks whose performance determines the overall rating for the machine,
     are run in the <systemitem>user</systemitem> &cpuset;.
    </para>
   </formalpara>
  </listitem>
 </itemizedlist>

 <para>
  The <command>shield</command> subcommand manages all of these &cpuset;s and
  lets you define the CPUs and memory nodes that are in the
  <literal>shielded</literal> and <literal>unshielded</literal> sets. 
  The subcommand automatically moves all movable tasks on the system into the
  <literal>unshielded</literal> &cpuset; on shield activation, and back into
  the <systemitem>root</systemitem> &cpuset; on shield tear down. The subcommand
  lets you move tasks into and out of the shield. Additionally, you can move
  special tasks (kernel threads) which normally run in the
  <systemitem>root</systemitem> &cpuset; into the <literal>unshielded</literal>
  set. This makes your shield have even less disturbance.
 </para>
 <para>
  The <command>shield</command> subcommand abstracts the management of these &cpuset;s away from
  you. It provides options that drive how the shield is set up, which tasks
  are to be shielded or not, and the status of the shield. In
  fact, you need not be bothered with the naming of the required &cpuset;s or
  even where the &cpuset; file system is mounted. <command>cset</command> and
  the <command>shield</command> subcommand takes care of all that.
 </para>
 <para>
  If you need to define more &cpuset;s for your application, it is likely
  that this simple shielding is not rich enough for you. In this
  case, you should transition to using the <command>set</command> and
  <command>proc</command> subcommands described in
  <xref linkend="cha-shielding-cpuset"/>.
 </para>

 <sect1 xml:id="sec-shielding-model-ex">
  <title>A Simple Shielding Example</title>
  <para> Assume that we have a 4-core machine that has uniform memory access.
   This means there are 4 CPUs at your disposal and there is only one memory node
   available. On such machines, we do not need to specify any memory node
   parameters to cset, it sets up the only available memory node by default. </para>

  <para>
   Usually, one wants to dedicate as many CPUs to the shield as possible and
   leave a minimal set of CPUs for normal system processing. The reasoning
   for this is, the performance of the important tasks will rule the
   performance of the installation as a whole. These important tasks need
   as many resources available to them as possible, exclusive of other,
   unimportant tasks that are running on the system.
  </para>

  <note>
   <title>Definition of Task</title>
   <para>
    In this document <emphasis>task</emphasis> is used to represent either a
    process or a thread that is running on the system.
   </para>
  </note>
</sect1>
 
 <sect1 xml:id="sec-shielding-model-ex-setup-teardown">
   <title>Setup and Teardown of the Shield</title>
   <para>
    To set up a shield of 3 CPUs with 1 CPU left for low priority system
    processing, issue the following command.
   </para>
<screen>&prompt.user;<command>cset</command> shield -c 1-3
cset: --> activating shielding:
cset: moving 176 tasks from root into system cpuset...
[==================================================]%
cset: "system" cpuset of CPUSPEC(0) with 176 tasks running
cset: "user" cpuset of CPUSPEC(1-3) with 0 tasks running</screen>
   <para>
    This command does several things. First, it creates a
    <literal>user</literal> &cpuset; with what is called a CPUSPEC (CPU
    specification) from the <option>-c/--cpu</option> option. This CPUSPEC
    specifies to use CPUs 1 through 3 inclusively. Next, the command creates
    a <literal>system</literal> &cpuset; with a CPUSPEC that is the inverse of
    the <option>-c</option> option for the current machine. On this machine
    that &cpuset; will only contain the first CPU, CPU0. Next, all user space
    processes running in the <literal>root</literal> &cpuset; are transferred
    to the <literal>system</literal> &cpuset;. This makes all those processes
    run only on CPU0. The effect of this is that the shield consists of CPUs
    1 through 3 and they are now idling.
   </para>
   <para>
    Note that the command did not move the kernel threads that are running
    in the <literal>root</literal> &cpuset; to the <literal>system</literal>
    &cpuset;. This is because you may want these kernel threads to use all
    available CPUs. If you do not, then you can use the
    <option>-k</option>/<option>--kthread</option> option as described below.
   </para>
   <para>
    The shield setup command above outputs the information of which &cpuset;s
    were created and how many tasks are running on each. To see
    the current status of the shield again, issue this command:
   </para>
<screen>&prompt.user;<command>cset</command> shield
cset: --> shielding system active with
cset: "system" cpuset of CPUSPEC(0) with 176 tasks running
cset: "user" cpuset of CPUSPEC(1-3) with 0 tasks running</screen>
   <para>
    Which shows us that the shield is set up and that 176 tasks are running
    in the <literal>system</literal> &cpuset;—the
    <emphasis>unshielded</emphasis> &cpuset;.
   </para>
   <para>
    It is important to move all possible tasks from the
    <literal>root</literal> &cpuset; to the unshielded
    <literal>system</literal> &cpuset; because a task’s &cpuset; property is
    inherited by its children. Since we’ve moved all running tasks
    (including init) to the unshielded <literal>system</literal> &cpuset;,
    that means that any new tasks that are spawned will also run in the
    unshielded <literal>system</literal> &cpuset;.
   </para>
   <para>
    Some kernel threads can be moved into the unshielded
    <literal>system</literal> &cpuset; as well. These are the threads that are
    not bound to specific CPUs. If a kernel thread is bound to a specific
    CPU, then it is generally not a good idea to move that thread to the
    <literal>system</literal> set because at worst it may hang the system
    and at best it will slow the system down significantly. These threads
    are usually the IRQ threads on a real time Linux kernel, for example,
    and you should not move these kernel threads into
    <literal>system</literal>. If you leave them in the
    <literal>root</literal> &cpuset;, then they will have access to all CPUs.
   </para>
   <para>
    However, if your application demands an even <quote>quieter</quote>
    shield, then you can move all movable kernel threads into the unshielded
    <literal>system</literal> set with the following command.
   </para>
<screen>&prompt.user;<command>cset</command> shield -k on
cset: --> activating kthread shielding
cset: kthread shield activated, moving 70 tasks into system cpuset...
[==================================================]%
cset: done</screen>
   <para>
    You can see that this moved an additional 70 tasks to the unshielded
    <literal>system</literal> &cpuset;. Note that the <option>-k</option
    >/<option>--kthread on</option> parameter can be given at the shield's
    creation time. You do not need to perform these two steps separately if you know
    you will want kernel thread shielding as well. Executing
    <command>cset shield</command> again shows us the current state of the
    shield.
   </para>
<screen>&prompt.user;<command>cset</command> shield
cset: --> shielding system active with
cset: "system" cpuset of CPUSPEC(0) with 246 tasks running
cset: "user" cpuset of CPUSPEC(1-3) with 0 tasks running</screen>
   <para>
    You can get a detailed listing of what is running in the shield by
    adding either <option>-s/--shield</option> or
    <option>-u/--unshield</option> to the <command>shield</command>
    subcommand and using the verbose flag. You will get output similar to
    the following.
   </para>
<screen>&prompt.user;<command>cset</command> shield --unshield -v
cset: "system" cpuset of CPUSPEC(0) with 251 tasks running
USER     PID   PPID  SPPr TASK NAME
-------- ----- ----- ---- ---------
root     1     0     Soth init [5]
root     2     0     Soth [kthreadd]
root     84    2     Sf50 [IRQ-9
]...
alext    31796 31789 Soth less
root     32653 25222 Roth python ./cset shield --unshield -v</screen>
   <para>
    Note that the listing is abbreviated; we do have 251 tasks running in
    the <literal>system</literal> set. However, the <literal>SPPr</literal>
    field may need a little
    explanation. SPPr stands for <literal>State, Policy and
    Priority</literal>. You can see that the initial two tasks are Stopped
    and running in timeshare priority, marked as <literal>oth</literal> (for
    <literal>other</literal>). The [IRQ-9] task is also stopped, but marked
    at real time FIFO policy with a priority of 50. The last task in the
    listing is the <command>cset</command> command itself and is marked as
    running. Also note that adding a second <option>-v/--verbose</option>
    option will not restrict the output to fit into an 80 character screen.
   </para>
   <para>
    Tear down of the shield, stopping the shield in other words, is done
    with the <option>-r/--reset</option> option to the shield subcommand.
    When this command is issued, both the <literal>system</literal> and
    <literal>user</literal> &cpuset;s are deleted and any tasks that are
    running in both of those &cpuset;s are moved to the
    <literal>root</literal> &cpuset;. Once so moved, all tasks will have
    access to all resources on the system. For example:
   </para>
<screen>&prompt.user;<command>cset</command> shield --reset
cset: --> deactivating/reseting shielding
cset: moving 0 tasks from "/user" user set to root set...
cset: moving 250 tasks from "/system" system set to root set...
[==================================================]%
cset: deleting "/user" and "/system" sets
cset: done</screen>
  </sect1>

  <sect1 xml:id="sec-shielding-model-ex-move">
   <title>Moving Interesting Tasks Into and Out of the Shield</title>
   <para>
    Now that we have a shield running, the objective is to run our
    <quote>important</quote> processes in that shield. These processes can
    be anything, but usually they are directly related to the purpose of the
    machine. There are two ways to run tasks in the shield:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Exec a process into the shield
     </para>
    </listitem>
    <listitem>
     <para>
      Move an already running task into the shield
     </para>
    </listitem>
   </itemizedlist>
   <sect2 xml:id="sec-shielding-model-ex-move-exec">
    <title>Execing a Process Into the Shield</title>
    <para>
     Running a new process in the shield can be done with the
     <option>-e/--exec</option> option to the <command>shield</command>
     subcommand. This is the simplest way to get a task to run in the
     shield. For this example, let’s exec a new Bash shell into the shield
     with the following commands.
    </para>
<screen>&prompt.user;<command>cset</command> shield -s
cset: "user" cpuset of CPUSPEC(1-3) with 0 tasks running
cset: done


&prompt.user;<command>cset</command> shield -e bash
cset: --> last message, executed args into cpuset "/user", new pid is: 13300


&prompt.user;<command>cset</command> shield -s -v
cset: "user" cpuset of CPUSPEC(1-3) with 2 tasks running
USER     PID   PPID  SPPr TASK NAME
-------- ----- ----- ---- ---------
root     13300 8583  Soth bash
root     13329 13300 Roth python ./cset shield -s -v


&prompt.user;<command>exit</command>


&prompt.user;<command>cset</command> shield -s
cset: "user" cpuset of CPUSPEC(1-3) with 0 tasks running
cset: done</screen>
    <para>
     The first command above lists the status of the shield. You see that
     the shield is defined as CPUs 1 through 3 inclusive and currently there
     are no tasks running in it.
    </para>
    <para>
     The second command execs the Bash shell into the shield with the
     <option>-e</option> option. The last message of <command>cset</command>
     lists the PID of the new process.
    </para>
    <note>
     <title>Separating the Tool Options From the cset Command</title>
     <para>
      <command>cset</command> follows the tradition of separating the tool
      options from the command to be execed options with a double dash
      (<literal>--</literal>). This is not shown in this simple example, but
      if the command you want to exec also takes options, separate them with
      the double dash as follows:
     </para>
<screen>&prompt.user;<command>cset</command> shield -e mycommand -- -v</screen>
     <para>
      The <option>-v</option> will be passed to mycommand, and not to cset.
     </para>
    </note>
    <para>
     The next command lists the status of the shield again. There are two
     tasks running shielded: our new shell and the cset status command
     itself. Remember that the &cpuset; property of a task is inherited by its
     children. Since we ran the new shell in the shield, its child, which is
     the status command, also ran in the shield.
    </para>
    <tip>
     <title>Execing a Shell Into the Shield Is Useful</title>
     <para>
      Execing a shell into the shield is a useful way to experiment with
      running tasks in the shield since all children of the shell will also
      run in the shield.
     </para>
    </tip>
    <para>
     The last command exits the shell after which we request a shield status
     again and see that, once again, it does not contain any tasks.
    </para>
    <para>
     You may have noticed in the output above that both the new shell and
     the status command are running as the &rootuser; user. This is
     because cset needs to run as &rootuser; and so all it is children
     will also run as &rootuser;. If you need to run a process under a
     different user and or group, you may use the <option>--user</option>
     and <option>--group</option> options for execution as follows.
    </para>
<screen>&prompt.user;<command>cset</command> shield --user=alext --group=users -e bash
cset: --> last message, executed args into cpuset "/user", new pid is: 14212


&prompt.user;<command>cset</command> shield -s -v
cset: "user" cpuset of CPUSPEC(1-3) with 2 tasks running
USER     PID   PPID  SPPr TASK NAME
-------- ----- ----- ---- ---------
alext    14212 8583  Soth bash
alext    14241 14212 Roth python ./cset shield -s -v</screen>
   </sect2>
   <sect2 xml:id="sec-shielding-model-ex-move-shield-unshield">
    <title>Moving a Running Task Into and Out of the Shield</title>
    <para>
     While execing a process into the shield is undoubtedly useful, most of
     the time, you will want to move already running tasks into and out of
     the shield. The <command>cset</command> shield subcommand includes two
     options for doing this: <option>-s/--shield</option> and
     <option>-u/--unshield</option>. These options require a PIDSPEC
     (process specification) to also be specified with the
     <option>-p/--pid</option> option. The PIDSPEC defines which tasks get
     operated on. The PIDSPEC can be a single process ID, a list of process
     IDs separated by commas, and a list of process ID ranges separated by
     dashes, groups of which are separated by commas. For example:
    </para>
    <variablelist>
     <varlistentry>
      <term><option>--shield --pid</option> 1234</term>
      <listitem>
       <para>
        This PIDSPEC argument specifies that PID <literal>1234</literal> be
        shielded.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>--shield --pid</option> 1234,42,1934,15000,15001,15002</term>
      <listitem>
       <para>
        This PIDSPEC argument specifies that this list of PIDs only be moved
        into the shield.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>--unshield -p</option> 5000,5100,6010-7000,9232</term>
      <listitem>
       <para>
        This PIDSPEC argument specifies that PIDs <literal>5000</literal>,
        <literal>5100</literal> and <literal>9232</literal> be unshielded
        (moved out of the shield) along with any existing PID that is in the
        range <literal>6010</literal> through <literal>7000</literal>
        inclusive.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <note>
     <title>Information About the Range In a PIDSPEC</title>
     <para>
      A range in a PIDSPEC does not need to have tasks running for every
      number in that range. In fact, it is not even an error if there are no
      tasks running in that range: none will be moved in that case. The
      range only specifies to act on any tasks that have a PID or TID that
      is within that range.
     </para>
    </note>
    <para>
     Use of the appropriate PIDSPEC can thus be handy to move tasks and
     groups of tasks into and out of the shield. Additionally, there is one
     more option that can help with multi-threaded processes, and that is
     the <option>--threads</option> flag. If this flag is used together with a
     <command>shield</command> or <command>unshield</command> command with a
     PIDSPEC and if any of the task IDs in the PIDSPEC belong to a thread in
     a process container, then all the
     sibling threads in that process container will get shielded or
     unshielded as well. This flag provides an easy mechanism to
     shield/unshield all threads of a process by simply specifying one
     thread in that process.
    </para>
    <para>
     In the following example, we move the current shell into the shield
     with a range PIDSPEC and back out with the Bash variable for the
     current PID.
    </para>
<screen>&prompt.user;<command>echo</command> $$
22018


&prompt.user;<command>cset</command> shield -s -p 22010-22020
cset: --> shielding following pidspec: 22010-22020
cset: done


&prompt.user;<command>cset</command> shield -s -v
cset: "user" cpuset of CPUSPEC(1-3) with 2 tasks running
USER     PID   PPID  SPPr TASK NAME
-------- ----- ----- ---- ---------
root     3770  22018 Roth python ./cset shield -s -v
root     22018 5034  Soth bash
cset: done


&prompt.user;<command>cset</command> shield -u -p $$
cset: --> unshielding following pidspec: 22018
cset: done


&prompt.user;<command>cset</command> shield -s
cset: "user" cpuset of CPUSPEC(1-3) with 0 tasks running
cset: done</screen>
   </sect2>
  </sect1>
 
</chapter>
